{"ast":null,"code":"import _classCallCheck from\"/media/hagen/daten/SHRIMP/Code/chatbot/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/media/hagen/daten/SHRIMP/Code/chatbot/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/media/hagen/daten/SHRIMP/Code/chatbot/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/media/hagen/daten/SHRIMP/Code/chatbot/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/media/hagen/daten/SHRIMP/Code/chatbot/node_modules/@babel/runtime/helpers/esm/inherits\";import React from\"react\";import Flexbox from\"flexbox-react\";import userImg from\"./cat.jpg\";import\"./Chatbot.css\";import Chats from\"./Chats\";var Chatbot=/*#__PURE__*/function(_React$Component){_inherits(Chatbot,_React$Component);function Chatbot(){var _getPrototypeOf2;var _this;_classCallCheck(this,Chatbot);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(Chatbot)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={activeChannel:false};_this.toggleChannel=function(clickedChannel){return function(e){e.preventDefault();_this.setState({activeChannel:clickedChannel});};};return _this;}_createClass(Chatbot,[{key:\"render\",value:function render(){return React.createElement(\"div\",null,React.createElement(Flexbox,{className:\"chatbot-flexbox\",flexDirection:\"row\"},React.createElement(Flexbox,{className:\"channels-flexbox\",flexGrow:1},React.createElement(Channels,{channels:this.props.data,toggleChannel:this.toggleChannel,activeChannel:this.state.activeChannel})),React.createElement(Flexbox,{className:\"chats-flexbox\",flexGrow:4},React.createElement(Chats,{toggleChatbot:this.props.toggleChatbot,activeChannel:this.state.activeChannel}))));}}]);return Chatbot;}(React.Component);function Channels(props){var channels=props.channels;var listChannels=channels.map(function(channel,index){return React.createElement(\"div\",null,React.createElement(\"li\",{key:channel.id},React.createElement(Channel,{channel:channel,toggleChannel:props.toggleChannel,activeChannel:props.activeChannel})),React.createElement(\"div\",{className:\"channel-list-line\"}));});return React.createElement(Flexbox,{className:\"channels\",flexDirection:\"column\"},React.createElement(\"div\",{className:\"channel-header\"},\"Channelheader\"),React.createElement(\"ul\",{className:\"channel-list\"},listChannels));}function Channel(props){var className=\"channel-button\";if(props.activeChannel.id===props.channel.id){className+=\" active\";}return React.createElement(\"button\",{className:className,onClick:props.toggleChannel(props.channel)},React.createElement(Flexbox,{flexDirection:\"row\"},React.createElement(\"div\",{className:\"channel-button-img\"},\"Bild\"),React.createElement(Flexbox,{className:\"channel-button-title\",flexDirection:\"column\",flexGrow:1},props.channel.title),React.createElement(Flexbox,{className:\"channel-button-status\"},props.channel.timestamp)));}export default Chatbot;","map":{"version":3,"sources":["/media/hagen/daten/SHRIMP/Code/chatbot/src/components/Chatbot.js"],"names":["React","Flexbox","userImg","Chats","Chatbot","state","activeChannel","toggleChannel","clickedChannel","e","preventDefault","setState","props","data","toggleChatbot","Component","Channels","channels","listChannels","map","channel","index","id","Channel","className","title","timestamp"],"mappings":"2mBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CAEA,MAAO,eAAP,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,C,GAEMC,CAAAA,O,+YACJC,K,CAAQ,CACJC,aAAa,CAAE,KADX,C,OAKRC,a,CAAgB,SAAAC,cAAc,QAAI,UAAAC,CAAC,CAAI,CACrCA,CAAC,CAACC,cAAF,GACA,MAAKC,QAAL,CAAc,CAACL,aAAa,CAAEE,cAAhB,CAAd,EACD,CAH6B,E,0EAKrB,CACP,MACE,gCACE,oBAAC,OAAD,EAAS,SAAS,CAAC,iBAAnB,CAAqC,aAAa,CAAC,KAAnD,EACE,oBAAC,OAAD,EAAS,SAAS,CAAC,kBAAnB,CAAsC,QAAQ,CAAE,CAAhD,EACE,oBAAC,QAAD,EAAU,QAAQ,CAAE,KAAKI,KAAL,CAAWC,IAA/B,CAAqC,aAAa,CAAE,KAAKN,aAAzD,CAAwE,aAAa,CAAE,KAAKF,KAAL,CAAWC,aAAlG,EADF,CADF,CAIE,oBAAC,OAAD,EAAS,SAAS,CAAC,eAAnB,CAAmC,QAAQ,CAAE,CAA7C,EACE,oBAAC,KAAD,EAAO,aAAa,CAAE,KAAKM,KAAL,CAAWE,aAAjC,CAAgD,aAAa,CAAE,KAAKT,KAAL,CAAWC,aAA1E,EADF,CAJF,CADF,CADF,CAYD,C,qBAxBmBN,KAAK,CAACe,S,EA2B5B,QAASC,CAAAA,QAAT,CAAmBJ,KAAnB,CAA0B,CACxB,GAAMK,CAAAA,QAAQ,CAAGL,KAAK,CAACK,QAAvB,CACA,GAAMC,CAAAA,YAAY,CAAGD,QAAQ,CAACE,GAAT,CAAa,SAACC,OAAD,CAAUC,KAAV,QAClC,gCACE,0BAAI,GAAG,CAAED,OAAO,CAACE,EAAjB,EACE,oBAAC,OAAD,EAAS,OAAO,CAAEF,OAAlB,CAA2B,aAAa,CAAER,KAAK,CAACL,aAAhD,CAA+D,aAAa,CAAEK,KAAK,CAACN,aAApF,EADF,CADF,CAIE,2BAAK,SAAS,CAAC,mBAAf,EAJF,CADkC,EAAb,CAArB,CAQA,MACE,qBAAC,OAAD,EAAS,SAAS,CAAC,UAAnB,CAA8B,aAAa,CAAC,QAA5C,EACE,2BAAK,SAAS,CAAC,gBAAf,kBADF,CAIE,0BAAI,SAAS,CAAC,cAAd,EACGY,YADH,CAJF,CADF,CAUD,CAED,QAASK,CAAAA,OAAT,CAAkBX,KAAlB,CAAyB,CACvB,GAAIY,CAAAA,SAAS,CAAG,gBAAhB,CACA,GAAIZ,KAAK,CAACN,aAAN,CAAoBgB,EAApB,GAA2BV,KAAK,CAACQ,OAAN,CAAcE,EAA7C,CAAiD,CAC/CE,SAAS,EAAI,SAAb,CACD,CAED,MACE,+BAAQ,SAAS,CAAEA,SAAnB,CAA8B,OAAO,CAAEZ,KAAK,CAACL,aAAN,CAAoBK,KAAK,CAACQ,OAA1B,CAAvC,EACE,oBAAC,OAAD,EAAS,aAAa,CAAC,KAAvB,EACE,2BAAK,SAAS,CAAC,oBAAf,SADF,CAKE,oBAAC,OAAD,EAAS,SAAS,CAAC,sBAAnB,CAA0C,aAAa,CAAC,QAAxD,CAAiE,QAAQ,CAAE,CAA3E,EACGR,KAAK,CAACQ,OAAN,CAAcK,KADjB,CALF,CAaE,oBAAC,OAAD,EAAS,SAAS,CAAC,uBAAnB,EACGb,KAAK,CAACQ,OAAN,CAAcM,SADjB,CAbF,CADF,CADF,CAqBD,CAED,cAAetB,CAAAA,OAAf","sourcesContent":["import React from \"react\"\nimport Flexbox from \"flexbox-react\"\nimport userImg from \"./cat.jpg\"\n\nimport \"./Chatbot.css\"\nimport Chats from \"./Chats\"\n\nclass Chatbot extends React.Component {\n  state = {\n      activeChannel: false\n  }\n\n  // use arrow function to get parameter from onCLick function\n  toggleChannel = clickedChannel => e => {\n    e.preventDefault()\n    this.setState({activeChannel: clickedChannel})\n  }\n\n  render() {\n    return (\n      <div>\n        <Flexbox className=\"chatbot-flexbox\" flexDirection=\"row\">\n          <Flexbox className=\"channels-flexbox\" flexGrow={1}>\n            <Channels channels={this.props.data} toggleChannel={this.toggleChannel} activeChannel={this.state.activeChannel}/>\n          </Flexbox>\n          <Flexbox className=\"chats-flexbox\" flexGrow={4}>\n            <Chats toggleChatbot={this.props.toggleChatbot} activeChannel={this.state.activeChannel}/>\n          </Flexbox>\n        </Flexbox>\n      </div>\n    )\n  }\n}\n\nfunction Channels (props) {\n  const channels = props.channels\n  const listChannels = channels.map((channel, index) =>\n  <div>\n    <li key={channel.id}>\n      <Channel channel={channel} toggleChannel={props.toggleChannel} activeChannel={props.activeChannel} />\n    </li>\n    <div className=\"channel-list-line\"/>\n  </div>\n  )\n  return (\n    <Flexbox className=\"channels\" flexDirection=\"column\">\n      <div className=\"channel-header\">\n        Channelheader\n      </div>\n      <ul className=\"channel-list\">\n        {listChannels}\n      </ul>\n    </Flexbox>\n  )\n}\n\nfunction Channel (props) {\n  let className = \"channel-button\"\n  if (props.activeChannel.id === props.channel.id) {\n    className += \" active\"\n  }\n\n  return (\n    <button className={className} onClick={props.toggleChannel(props.channel)}>\n      <Flexbox flexDirection=\"row\">\n        <div className=\"channel-button-img\">\n          {/* <img src={userImg} alt={\"logo\"}/> */}\n          Bild\n        </div>\n        <Flexbox className=\"channel-button-title\" flexDirection=\"column\" flexGrow={1}>\n          {props.channel.title}\n          {/* <Flexbox className=\"channel-button-title\" flexGrow={1}>\n          </Flexbox> */}\n          {/* <Flexbox className=\"channel-button-subtitle\">\n            {props.channel.status}\n          </Flexbox> */}\n        </Flexbox>\n        <Flexbox className=\"channel-button-status\">\n          {props.channel.timestamp}\n        </Flexbox>\n      </Flexbox>\n    </button>\n  )\n}\n\nexport default Chatbot\n"]},"metadata":{},"sourceType":"module"}