{"ast":null,"code":"var _jsxFileName = \"/media/hagen/daten/SHRIMP/Code/chatbot/src/components/Chatbot.js\";\nimport React from \"react\";\nimport Flexbox from \"flexbox-react\";\nimport \"./Chatbot.css\";\nimport Chats from \"./Chats\";\n\nclass Chatbot extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      activeChannel: false\n    };\n\n    this.toggleChannel = clickedChannel => e => {\n      e.preventDefault();\n      this.setState({\n        activeChannel: clickedChannel\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, React.createElement(Flexbox, {\n      className: \"chatbot-flexbox\",\n      flexDirection: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, React.createElement(Flexbox, {\n      className: \"channels-flexbox\",\n      flexGrow: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(Channels, {\n      channels: this.props.data,\n      toggleChannel: this.toggleChannel,\n      activeChannel: this.state.activeChannel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    })), React.createElement(Flexbox, {\n      className: \"chats-flexbox\",\n      flexGrow: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(Chats, {\n      toggleChatbot: this.props.toggleChatbot,\n      activeChannel: this.state.activeChannel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nfunction Channels(props) {\n  const channels = props.channels;\n  const listChannels = channels.map((channel, index) => React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    key: channel.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(Channel, {\n    channel: channel,\n    toggleChannel: props.toggleChannel,\n    activeChannel: props.activeChannel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"channel-list-line\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  })));\n  return React.createElement(Flexbox, {\n    className: \"channels\",\n    flexDirection: \"column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"channel-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Channelheader\"), React.createElement(\"ul\", {\n    className: \"channel-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, listChannels));\n}\n\nfunction Channel(props) {\n  let className = \"channel-button\";\n\n  if (props.activeChannel.id === props.channel.id) {\n    className += \" active\";\n  }\n\n  return React.createElement(\"button\", {\n    className: className,\n    onClick: props.toggleChannel(props.channel),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(Flexbox, {\n    flexDirection: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"channel-button-img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"Bild\"), React.createElement(Flexbox, {\n    flexGrow: 5,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(Flexbox, {\n    flexDirection: \"column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Flexbox, {\n    className: \"channel-button-title\",\n    flexGrow: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Titel der laaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaang ist\"))), React.createElement(Flexbox, {\n    flexGrow: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"Status\")));\n}\n\nexport default Chatbot;","map":{"version":3,"sources":["/media/hagen/daten/SHRIMP/Code/chatbot/src/components/Chatbot.js"],"names":["React","Flexbox","Chats","Chatbot","Component","state","activeChannel","toggleChannel","clickedChannel","e","preventDefault","setState","render","props","data","toggleChatbot","Channels","channels","listChannels","map","channel","index","id","Channel","className"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport Flexbox from \"flexbox-react\"\n\nimport \"./Chatbot.css\"\nimport Chats from \"./Chats\"\n\nclass Chatbot extends React.Component {\n  state = {\n      activeChannel: false\n  }\n\n  // use arrow function to get parameter from onCLick function\n  toggleChannel = clickedChannel => e => {\n    e.preventDefault()\n    this.setState({activeChannel: clickedChannel})\n  }\n\n  render() {\n    return (\n      <div>\n        <Flexbox className=\"chatbot-flexbox\" flexDirection=\"row\">\n          <Flexbox className=\"channels-flexbox\" flexGrow={1}>\n            <Channels channels={this.props.data} toggleChannel={this.toggleChannel} activeChannel={this.state.activeChannel}/>\n          </Flexbox>\n          <Flexbox className=\"chats-flexbox\" flexGrow={4}>\n            <Chats toggleChatbot={this.props.toggleChatbot} activeChannel={this.state.activeChannel}/>\n          </Flexbox>\n        </Flexbox>\n      </div>\n    )\n  }\n}\n\nfunction Channels (props) {\n  const channels = props.channels\n  const listChannels = channels.map((channel, index) =>\n  <div>\n    <li key={channel.id}>\n      <Channel channel={channel} toggleChannel={props.toggleChannel} activeChannel={props.activeChannel} />\n    </li>\n    <div className=\"channel-list-line\"/>\n  </div>\n  )\n  return (\n    <Flexbox className=\"channels\" flexDirection=\"column\">\n      <div className=\"channel-header\">\n        Channelheader\n      </div>\n      <ul className=\"channel-list\">\n        {listChannels}\n      </ul>\n    </Flexbox>\n  )\n}\n\nfunction Channel (props) {\n  let className = \"channel-button\"\n  if (props.activeChannel.id === props.channel.id) {\n    className += \" active\"\n  }\n\n  return (\n    <button className={className} onClick={props.toggleChannel(props.channel)}>\n      <Flexbox flexDirection=\"row\">\n        <div className=\"channel-button-img\">\n          Bild\n        </div>\n        <Flexbox flexGrow={5}>\n          <Flexbox flexDirection=\"column\">\n            <Flexbox className=\"channel-button-title\" flexGrow={1}>\n              Titel der laaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaang ist\n            </Flexbox>\n          </Flexbox>\n        </Flexbox>\n        <Flexbox flexGrow={1}>\n          Status\n        </Flexbox>\n      </Flexbox>\n    </button>\n  )\n}\n\nexport default Chatbot\n"]},"metadata":{},"sourceType":"module"}