{"version":3,"sources":["components/Chats.js","components/Chatbot.js","App.js","index.js"],"names":["Chats","this","updateScrollbar","props","scrollPos","scrollToEnd","chatDialog","document","getElementById","setTimeout","scroll","behavior","top","activeChannel","status","scrollBehavior","scrollTime","scrollHeight","offsetHeight","className","Chatdialog","React","Component","contentList","content","map","item","index","type","key","id","Chatdialogbox","nextItem","length","console","log","container","author","text","timestamp","Chatdialogimage","state","width","height","loaded","error","img","poll","setInterval","complete","clearInterval","naturalWidth","setState","naturalHeight","fill","src","source","alt","style","visibility","onLoad","onError","Chatdialogselection","hideSelection","toggleSelection","selectionList","options","option","chatSelectionList","chatSelectionEdit","onClick","Chatbot","scrollPosList","Array","data","nextScrollPos","lastScrollPos","smallDevice","focusChannel","updateDimensions","window","innerWidth","toggleChannel","clickedChannel","e","scrollTop","value","entries","toggleFocus","addEventListener","removeEventListener","chatbot","channelHeaderContainer","chatHeaderContainer","channelContainer","chatContainer","toggleChatbot","Channels","channels","Chatheader","channelList","channel","Channelitem","channelButton","itemStatus","subline","lastDialog","icon","ChatbotButton","App","chatBotIsActive","ReactDOM","render"],"mappings":"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","file":"static/js/main.e0e893dd.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./Chats.css\"\n\n\nclass Chats extends React.Component {\n\n  componentDidUpdate() {\n    this.updateScrollbar()\n  }\n\n  updateScrollbar() {\n    if(this.props.scrollPos === null) {\n      // initialize scrollbar with end position\n      this.scrollToEnd(\"auto\", 5)\n    } else {\n      // set scrollbar as it was before\n      let chatDialog = document.getElementById(\"chatContainer\")\n      setTimeout(() => {\n        chatDialog.scroll({\n          behavior: \"auto\",\n          top: this.props.scrollPos\n        })\n      }, 1);\n\n      // update scrollbar if there are new elements\n      if(this.props.activeChannel.status === \"seen\") {\n        this.scrollToEnd(\"smooth\", 100)\n      }\n    }\n  }\n\n  scrollToEnd(scrollBehavior, scrollTime) {\n    let chatDialog = document.getElementById(\"chatContainer\")\n\n    setTimeout(() => {\n      let offsetMessages = chatDialog.scrollHeight + 1\n      let offsetChatDialog = chatDialog.offsetHeight\n      let scrollPos = offsetMessages - offsetChatDialog\n      if(scrollPos > 1) {\n        chatDialog.scroll({\n          behavior: scrollBehavior,\n          top: scrollPos\n        })\n      }\n    }, scrollTime)\n  }\n\n\n  render() {\n    return (\n      <div className=\"chat-dialog\">\n        <Chatdialog activeChannel={this.props.activeChannel}/>\n      </div>\n    )\n  }\n}\n\n\nfunction Chatdialog (props) {\n  let contentList = false\n  if (props.activeChannel) {\n    const content = props.activeChannel.content\n    contentList = content.map((item,index) =>\n      (item.type === \"text\") ?\n        <li key={item.id} id={item.id}>\n          <Chatdialogbox item={item}/>\n        </li>\n        :\n        (item.type === \"image\") ?\n        <li key={item.id} id={item.id}>\n          <Chatdialogimage item={item}/>\n        </li>\n        :\n        (item.type === \"selection\") ?\n        <li key={item.id} id={item.id}>\n          <Chatdialogselection item={item} nextItem={(index === content.length-1) ? false : content[index+1]}/>\n        </li>\n        :\n        console.log(\"warning, missing content type: \" + item.type )\n    )\n  }\n  return (\n    <ul className=\"chat-dialog-list\">\n      {contentList}\n    </ul>\n  )\n}\n\nfunction Chatdialogbox (props) {\n  let container\n  if(props.item.author === \"shrimpy\") {\n    container = \"chat-container-left\"\n  }\n  else {\n    container = \"chat-container-right\"\n  }\n\n  return (\n    <div className={container}>\n      <div className=\"chat-item speech-bubble\">\n        <div className=\"chat-item-text\">\n          {props.item.text}\n        </div>\n        <div className=\"chat-item-time\">\n          {props.item.timestamp}\n        </div>\n      </div>\n    </div>\n  )\n}\n\n\nclass Chatdialogimage extends React.Component {\n  state = {\n    width: 0,\n    height: 0,\n    loaded: false,\n    error: false\n  }\n\n  componentDidMount() {\n    var img = document.getElementById(\"chatImage\")\n    var poll = setInterval(() => {\n      if(this.state.error || img.complete) {\n        clearInterval(poll)\n      }\n      else if (img.naturalWidth) {\n          clearInterval(poll)\n          this.setState({width:  img.naturalWidth})\n          this.setState({height: img.naturalHeight})\n      }\n    }, 1)\n  }\n\n\n  render() {\n    return (\n      <div className=\"chat-container-left\">\n\n        {!this.state.loaded ? (\n          <svg className=\"chat-image\" width={this.state.width} height={this.state.height}>\n            <rect width=\"100%\" height=\"100%\" fill=\"lightgrey\"/>\n          </svg>\n        ) : null}\n\n        <img\n          className=\"chat-image\"\n          id=\"chatImage\"\n          src={this.props.item.source}\n          alt={this.props.item.text}\n          style={!this.state.loaded ? { visibility: 'hidden' } : {}}\n          onLoad={() => this.setState({loaded: true})}\n          onError={() => this.setState({error: true})}\n        />\n      </div>\n    )\n  }\n}\n\n\nclass Chatdialogselection extends React.Component {\n  state = {\n    hideSelection: false\n  }\n\n  toggleSelection = () => {\n    this.setState({hideSelection: !this.state.hideSelection})\n  }\n\n  // hide already selected items\n  componentDidMount() {\n    if (this.props.nextItem) {\n      this.setState({hideSelection: true})\n    }\n  }\n\n  render() {\n    let options = this.props.item.options\n    let selectionList = options.map(option =>\n      <li key={option.id}>\n        <button className={\"chat-selection-button \" + (option.id === this.props.nextItem.id ? \"selected\" : \"\")}>\n          <div className=\"chat-selection-button-text\">\n            {option.text}\n          </div>\n        </button>\n      </li>\n    )\n\n    // hide or show selection list depending on state of edit button\n    let chatSelectionList = \"chat-selection-list\"\n    if (this.state.hideSelection === true) {\n      chatSelectionList += \" hide\"\n    }\n\n    // hide edit icon if there is no selection\n    let chatSelectionEdit = \"chat-selection-edit\"\n    if (!this.props.nextItem) {\n      chatSelectionEdit += \" hide\"\n    }\n\n    return (\n      <div className=\"chat-container-left\">\n        <div className=\"chat-selection speech-bubble\">\n          <div className=\"chat-item-text\">\n            {this.props.item.text}\n          </div>\n          <ul className={chatSelectionList}>\n            {selectionList}\n          </ul>\n          <button className={chatSelectionEdit} onClick={this.toggleSelection}>\n            •••\n          </button>\n          <div className=\"chat-item-time\">\n            {this.props.item.timestamp}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\n\n\nexport default Chats\n","import React from \"react\"\n\nimport \"./Chatbot.css\"\nimport Chats from \"./Chats\"\n\n\nclass Chatbot extends React.Component {\n  state = {\n      activeChannel: false,\n      scrollPosList: Array(this.props.data.length).fill(null),\n      nextScrollPos: null,\n      lastScrollPos: null,\n      smallDevice: false,\n      focusChannel: true\n  }\n\n  // resize event listener for smartphone view\n  componentDidMount() {\n    this.updateDimensions()\n    window.addEventListener('resize', this.updateDimensions);\n  }\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateDimensions);\n  }\n  updateDimensions = () => {\n    if(window.innerWidth < 500 && !this.state.smallDevice) {\n      this.setState({smallDevice: true})\n      this.setState({focusChannel: true})\n    } else if(window.innerWidth >= 500 && this.state.smallDevice){\n      this.setState({smallDevice: false})\n    }\n  }\n\n  // use arrow function to get parameter from onCLick function\n  toggleChannel = clickedChannel => e => {\n\n    // update smartphone view focus\n    if(this.state.smallDevice) {\n      this.setState({focusChannel: !this.state.focusChannel})\n    }\n\n    // set scroll positions and update active channel\n    if(this.state.activeChannel !== clickedChannel) {\n      // save last scroll positon in scrollPosList\n      let lastScrollPos = document.getElementById(\"chatContainer\").scrollTop\n      if(this.state.smallDevice) {\n        lastScrollPos = this.state.lastScrollPos\n      }\n      this.setState(state => {\n        const scrollPosList = state.scrollPosList.map((value, index) => {\n          if (this.props.data[index].id === this.state.activeChannel.id) {\n            return lastScrollPos\n          } else {\n            return value\n          }\n        })\n        return {\n          scrollPosList\n        }\n      })\n\n      // update active channel\n      this.setState({activeChannel: clickedChannel})\n\n      // update next scroll position\n      for (const[index, scrollPos] of this.state.scrollPosList.entries()) {\n          if(this.props.data[index].id === clickedChannel.id) {\n            this.setState({nextScrollPos: scrollPos})\n          }\n      }\n    }\n    // else if clicked channel is the same as the active channel, only in smartphone view\n    else if(this.state.smallDevice){\n      this.setState({nextScrollPos: this.state.lastScrollPos})\n    }\n  }\n\n\n  // toggle smartphone view focus and save scroll position\n  toggleFocus = () => {\n    this.setState({focusChannel: !this.state.focusChannel})\n    this.setState({lastScrollPos: document.getElementById(\"chatContainer\").scrollTop})\n  }\n\n  render() {\n    // set classnames\n    let chatbot = \"chatbot\"\n    let channelHeaderContainer = \"channel-header-container\"\n    let chatHeaderContainer = \"chat-header-container\"\n    let channelContainer = \"channel-container\"\n    let chatContainer = \"chat-container\"\n\n    // define smartphone views\n    if(this.state.smallDevice) {\n      if(this.state.focusChannel) {\n        chatbot += \" chatbot-focus-channel\"\n        chatHeaderContainer += \" hide\"\n        chatContainer += \" hide\"\n      } else {\n        chatbot += \" chatbot-focus-chat\"\n        channelHeaderContainer += \" hide\"\n        channelContainer += \" hide\"\n      }\n    }\n\n    return (\n      <div>\n        <div className={chatbot}>\n          <div className={channelHeaderContainer}>\n            <div className=\"channel-header\">\n              Chatbot\n            </div>\n          </div>\n          <div className={chatHeaderContainer}>\n            <Chatheader toggleChatbot={this.props.toggleChatbot} toggleFocus={this.toggleFocus} activeChannel={this.state.activeChannel} smallDevice={this.state.smallDevice}/>\n          </div>\n          <div className={channelContainer}>\n            <Channels channels={this.props.data} toggleChannel={this.toggleChannel} activeChannel={this.state.activeChannel} smallDevice={this.state.smallDevice}/>\n          </div>\n          <div className={chatContainer} id=\"chatContainer\">\n            <Chats toggleChatbot={this.props.toggleChatbot} activeChannel={this.state.activeChannel} scrollPos={this.state.nextScrollPos}/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst Chatheader = props => (\n  <div className=\"chat-header\">\n    <div className=\"chat-header-button-container\">\n      {props.smallDevice ?\n        <button className=\"chat-header-button\" onClick={props.toggleFocus}>\n          {\"<\"}\n        </button>\n      : null}\n      </div>\n      <div className=\"chat-header-title\">\n    </div>\n    <div className=\"chat-header-button-container\">\n      <button className=\"chat-header-button\">\n        Help\n      </button>\n    </div>\n    <div className=\"chat-header-button-container\">\n      <button className=\"chat-header-button\" onClick={props.toggleChatbot}>\n        Logout\n      </button>\n    </div>\n  </div>\n)\n\nfunction Channels (props) {\n  const channels = props.channels\n  const channelList = channels.map((channel, index) =>\n    <li key={channel.id}>\n      <Channelitem channel={channel} toggleChannel={props.toggleChannel} activeChannel={props.activeChannel} smallDevice={props.smallDevice} />\n    </li>\n  )\n  return (\n    <ul className=\"channel-list\">\n      {channelList}\n    </ul>\n  )\n}\n\nfunction Channelitem (props) {\n  // classnames for active state\n  let channelButton = \"channel-list-button\"\n  let itemStatus = \"channel-item-status\"\n  if (props.activeChannel.id === props.channel.id && !props.smallDevice) {\n    channelButton += \" active\"\n    itemStatus += \" active\"\n  }\n\n  // subline from last dialog\n  let content = props.channel.content\n  let lastDialog = content[content.length-1]\n  let subline\n  if (lastDialog.type === \"image\") {\n    subline = \"[ image ] \" + lastDialog.text\n  } else {\n    subline = lastDialog.text\n  }\n\n  return (\n    <button className={channelButton} onClick={props.toggleChannel(props.channel)}>\n      <div className=\"channel-item-container\">\n        <div className={itemStatus} />\n        <div className=\"channel-item-image\">\n\n        </div>\n        <div className=\"channel-item-headline\">\n          {props.channel.content[0].text}\n        </div>\n        <div className=\"channel-item-time\">\n          {lastDialog.timestamp}\n        </div>\n        <div className=\"channel-item-subline\">\n          {subline}\n        </div>\n        {props.channel.status===\"seen\" &&\n          <div className=\"channel-item-unread\">\n            unread\n          </div>\n        }\n\n      </div>\n    </button>\n  )\n}\n\nexport default Chatbot\n","import React from \"react\"\nimport Chatbot from \"./components/Chatbot\"\n\n\nconst data = [\n  {\n    icon: \"userIcon\",\n  \tstatus: \"read\",\n    id: \"channel0\",\n  \tcontent: [\n  \t\t{\n        type: \"text\",\n        author: \"shrimpy\",\n        text: \"Hallo hier ist Shrimpy!\",\n      \ttimestamp: \"11:20\",\n        id: \"shrimp_1\"\n      },\n      {\n        type: \"selection\",\n        author: \"shrimpy\",\n        text: \"Wie kann ich dir bei deinen Problemen helfen?\",\n        timestamp: \"11:20\",\n        id: \"shrimp_2\",\n        options: [\n          {\n            text: \"Wie bekomme ich den nächsten Badge?\",\n            id: \"answer_2\"\n          },\n          {\n            text: \"Bitte hilf mir bei der Bedienung. Ich weiß nicht so recht, wie ich wieder zurück zum Hauptmenu komme.\",\n            id: \"answer_1\"\n          },\n          {\n            text: \"Warum heißt du eigentlich Shrimpy?\",\n            id: \"answer_3\"\n          }\n        ]\n      },\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Bitte hilf mir bei der Bedienung. Ich weiß nicht so recht, wie ich wieder zurück zum Hauptmenu komme.\",\n        timestamp: \"11:30\",\n        id: \"answer_1\"\n      },\n      {\n        type: \"selection\",\n        author: \"shrimpy\",\n        text: \"Aber gerne doch. Siehst du oben rechts den Button auf dem Logout steht?\",\n        timestamp: \"13:20\",\n        id: \"select_13\",\n        options: [\n          {\n            text: \"Ja, den Button sehe ich.\",\n            id: \"answer_2\"\n          },\n          {\n            text: \"Nein, leider nicht.\",\n            id: \"us_anw5\"\n          }\n        ]\n      },\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Ja, den Button sehe ich.\",\n        timestamp: \"13:22\",\n        id: \"answer_2\"\n      },\n      {\n        type: \"text\",\n        author: \"shrimpy\",\n        text: \"Wenn du darauf klickst, kommst du wieder zurück zum Hauptmenu.\",\n        timestamp: \"13:25\",\n        id: \"shrimp_4\"\n      },\n      {\n        type: \"selection\",\n        author: \"shrimpy\",\n        text: \"Du kannst jederzeit in den Chatbot zurückkehren. Dafür musst du nur auf den Button Enter Chatbot klicken.\",\n        timestamp: \"13:26\",\n        id: \"shrimp_5\",\n        options: [\n          {\n            text: \"Danke Shrimpy!\",\n            id: \"answer_3\"\n          },\n          {\n            text: \"Ich habe noch eine andere Frage.\",\n            id: \"us_anw5\"\n          }\n        ]\n      },\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Danke Shrimpy!\",\n        timestamp: \"15:02\",\n        id: \"answer_3\"\n      }\n  \t]\n  },\n  {\n    icon: \"userIcon2\",\n    status: \"seen\",\n    id: \"channel1\",\n    content: [\n      {\n        type: \"text\",\n        author: \"shrimpy\",\n        text: \"Shrimpy hier, Glückwunsch zu deinem neuen Badge :).\",\n      \ttimestamp: \"11:20\",\n        id: \"shrimp_1\"\n      },\n      {\n        type: \"image\",\n        author: \"shrimpy\",\n        source: \"https://media.giphy.com/media/sIIhZliB2McAo/giphy.gif\",\n        text: \"Katzenbild\",\n        timestamp: \"11.21\",\n        id: \"shrimp_img1\"\n      },\n      {\n        type: \"selection\",\n        author: \"shrimpy\",\n        text: \"Willst du weiter über neue Badges informiert werden?\",\n        timestamp: \"11.46\",\n        id: \"select_3\",\n        options: [\n          {\n            text: \"Yeah, auf jeden Fall.\",\n            id: \"use_anw4\"\n          },\n          {\n            text: \"Bitte frage mich später nochmal.\",\n            id: \"us_anw5\"\n          },\n          {\n            text: \"Nein danke.\",\n            id: \"us_anw6\"\n          }\n        ]\n      },\n      {\n        type: \"text\",\n        text: \"Yeah, auf jeden Fall.\",\n        author: \"user\",\n        timestamp: \"12.12\",\n        id: \"use_anw4\"\n      },\n      {\n        type: \"text\",\n        text: \"Nicht lange, dann wartet der nächste Badge auf dich. Es gibt viele Interaktionsmöglichkeiten mit dem Reader zu entdecken.\",\n        author: \"shrimpy\",\n        timestamp: \"12.31\",\n        id: \"shrimpy_7\"\n      }\n    ]\n  },\n  {\n    icon: \"userIcon3\",\n    status: \"seen\",\n    id: \"channel2\",\n    content: [\n      {\n        type: \"text\",\n        author: \"shrimpy\",\n        text: \"Du hast einen neuen Badge\",\n        timestamp: \"19:50\",\n        id: \"option_1\"\n      },\n      {\n        type: \"image\",\n        author: \"shrimpy\",\n        source: \"https://http.cat/204\",\n        text: \"Katzenbild\",\n        timestamp: \"19.56\",\n        id: \"shrimp_img2\"\n      }\n    ]\n  },\n  {\n    icon: \"userIcon3\",\n    status: \"seen\",\n    id: \"channel3\",\n    content: [\n      {\n        type: \"text\",\n        author: \"shrimpy\",\n        text: \"Wichtige Frage\",\n        timestamp: \"8:11\",\n        id: \"shrimpy_8\"\n      },\n      {\n        type: \"selection\",\n        author: \"shrimpy\",\n        text: \"Magst du lieber Katzen oder Hunde?\",\n      \ttimestamp: \"8:21\",\n        id: \"select_1\",\n        options: [\n          {\n            text: \"Ich mag Katze sehr gern.\",\n            id: \"option_1\"\n          },\n          {\n            text: \"Ich bin mehr ein Hundemensch.\",\n            id: \"option_2\"\n          },\n          {\n            text: \"Keine Frage, natürlich mag ich beide.\",\n            id: \"option_3\"\n          },\n          {\n            text: \"Weder noch, ich liebe Shrimps.\",\n            id: \"option_4\"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    icon: \"userIcon3\",\n    status: \"read\",\n    id: \"channel4\",\n    content: [\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Platzhalter\",\n      \ttimestamp: \"19:54\",\n        id: \"platzhalter\"\n      }\n    ]\n  },\n  {\n    icon: \"userIcon3\",\n    status: \"read\",\n    id: \"channel5\",\n    content: [\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Platzhalter\",\n      \ttimestamp: \"19:54\",\n        id: \"platzhalter\"\n      }\n    ]\n  },\n  {\n    icon: \"userIcon3\",\n    status: \"read\",\n    id: \"channel6\",\n    content: [\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Platzhalter\",\n      \ttimestamp: \"19:54\",\n        id: \"platzhalter\"\n      }\n    ]\n  },\n  {\n    icon: \"userIcon3\",\n    status: \"read\",\n    id: \"channel7\",\n    content: [\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Platzhalter\",\n      \ttimestamp: \"19:54\",\n        id: \"platzhalter\"\n      }\n    ]\n  },\n  {\n    icon: \"userIcon3\",\n    status: \"read\",\n    id: \"channel8\",\n    content: [\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Platzhalter\",\n      \ttimestamp: \"19:54\",\n        id: \"platzhalter\"\n      }\n    ]\n  },\n  {\n    icon: \"userIcon42\",\n    status: \"read\",\n    id: \"channel9\",\n    content: [\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Platzhalter\",\n      \ttimestamp: \"19:54\",\n        id: \"platzhalter\"\n      }\n    ]\n  },\n  {\n    icon: \"userIcon27\",\n    status: \"read\",\n    id: \"channel10\",\n    content: [\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Platzhalter\",\n      \ttimestamp: \"19:54\",\n        id: \"platzhalter\"\n      }\n    ]\n  }\n]\n\nclass App extends React.Component{\n  state = {\n    chatBotIsActive: false\n  }\n\n  toggleChatbot = () => {\n    this.setState({chatBotIsActive: !this.state.chatBotIsActive})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {!this.state.chatBotIsActive ?\n          <Chatbot data={data} toggleChatbot={this.toggleChatbot}/> :\n          <ChatbotButton toggleChatbot={this.toggleChatbot}/>\n        }\n      </div>\n    )\n  }\n}\n\nfunction ChatbotButton (props) {\n  return (\n    <button onClick={props.toggleChatbot}> Enter Chatbot </button>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}