{"version":3,"sources":["components/Chats.js","components/Chatbot.js","App.js","index.js"],"names":["Chats","className","Chatdialog","activeChannel","this","props","React","Component","contentList","content","map","item","index","type","key","id","Chatdialogbox","Chatdialogimage","nextItem","length","console","log","container","author","text","timestamp","src","source","alt","Chatdialogselection","state","hideSelection","toggleSelection","setState","selectionList","options","option","chatSelectionList","chatSelectionEdit","onClick","Chatbot","toggleChannel","clickedChannel","e","toggleChatbot","Channels","channels","data","Chatheader","channelList","channel","Channelitem","channelButton","itemStatus","subline","lastDialog","status","icon","ChatbotButton","App","chatBotIsActive","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4fbcdb5a.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./Chats.css\"\n\n\nclass Chats extends React.Component {\n  render() {\n    return (\n      <div className=\"chat\">\n        <div className=\"chat-dialog\">\n          <Chatdialog activeChannel={this.props.activeChannel}/>\n        </div>\n        <div className=\"chat-bottom\">\n\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction Chatdialog (props) {\n  let contentList = false\n  if (props.activeChannel) {\n    const content = props.activeChannel.content\n    contentList = content.map((item,index) =>\n      (item.type === \"text\") ?\n        <li key={item.id}>\n          <Chatdialogbox item={item}/>\n        </li>\n        :\n        (item.type === \"image\") ?\n        <li key={item.id}>\n          <Chatdialogimage item={item}/>\n        </li>\n        :\n        (item.type === \"selection\") ?\n        <li key={item.id}>\n          <Chatdialogselection item={item} nextItem={(index === content.length-1) ? false : content[index+1]}/>\n        </li>\n        :\n        console.log(\"warning, missing content type: \" + item.type )\n    )\n  }\n  return (\n    <ul className=\"chat-dialog-list\">\n      {contentList}\n    </ul>\n  )\n}\n\nfunction Chatdialogbox (props) {\n  let container\n  if(props.item.author === \"shrimpy\") {\n    container = \"chat-container-left\"\n  }\n  else {\n    container = \"chat-container-right\"\n  }\n\n  return (\n    <div className={container}>\n      <div className=\"chat-item speech-bubble\">\n        <div className=\"chat-item-text\">\n          {props.item.text}\n        </div>\n        <div className=\"chat-item-time\">\n          {props.item.timestamp}\n        </div>\n      </div>\n    </div>\n  )\n}\n\n\nfunction Chatdialogimage (props) {\n  return (\n    <div className=\"chat-container-left\">\n      <img className=\"chat-image\" src={props.item.source} alt={props.item.text}/>\n    </div>\n  )\n}\n\n\nclass Chatdialogselection extends React.Component {\n  state = {\n    hideSelection: false\n  }\n\n  toggleSelection = () => {\n    this.setState({hideSelection: !this.state.hideSelection})\n  }\n\n  // hide already selected items\n  componentDidMount() {\n    if (this.props.nextItem) {\n      this.setState({hideSelection: true})\n    }\n  }\n\n  render() {\n    let options = this.props.item.options\n    let selectionList = options.map(option =>\n      <li key={option.id}>\n        <button className={\"chat-selection-button \" + (option.id === this.props.nextItem.id ? \"selected\" : \"\")}>\n          <div className=\"chat-selection-button-text\">\n            {option.text}\n          </div>\n        </button>\n      </li>\n  )\n\n    // hide or show selection list depending on state of edit button\n    let chatSelectionList = \"chat-selection-list\"\n    if (this.state.hideSelection === true) {\n      chatSelectionList += \" hide\"\n    }\n\n    // hide edit icon if there is no selection\n    let chatSelectionEdit = \"chat-selection-edit\"\n    if (!this.props.nextItem) {\n      chatSelectionEdit += \" hide\"\n    }\n\n    return (\n      <div className=\"chat-container-left\">\n        <div className=\"chat-selection speech-bubble\">\n          <div className=\"chat-item-text\">\n            {this.props.item.text}\n          </div>\n          <ul className={chatSelectionList}>\n            {selectionList}\n          </ul>\n          <button className={chatSelectionEdit} onClick={this.toggleSelection}>\n            edit\n            {/* <MaterialIcon icon=\"format_line_spacing\" color=\"white\" size=\"10\"/> */}\n          </button>\n          <div className=\"chat-item-time\">\n            {this.props.item.timestamp}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\n\n\nexport default Chats\n","import React from \"react\"\n\nimport \"./Chatbot.css\"\nimport Chats from \"./Chats\"\n\n\nclass Chatbot extends React.Component {\n  state = {\n      activeChannel: false\n  }\n\n  // use arrow function to get parameter from onCLick function\n  toggleChannel = clickedChannel => e => {\n    this.setState({activeChannel: clickedChannel})\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"chatbot\">\n          <div className=\"channel-header-container\">\n            <div className=\"channel-header\">\n              Chatbot\n              {/* <MaterialIcon icon=\"chat\" invert size=\"27\"/> */}\n            </div>\n          </div>\n          <div className=\"chat-header-container\">\n            <Chatheader toggleChatbot={this.props.toggleChatbot} activeChannel={this.state.activeChannel}/>\n          </div>\n          <div className=\"channel-container\">\n            <Channels channels={this.props.data} toggleChannel={this.toggleChannel} activeChannel={this.state.activeChannel}/>\n          </div>\n          <div className=\"chat-container\">\n            <Chats toggleChatbot={this.props.toggleChatbot} activeChannel={this.state.activeChannel}/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst Chatheader = props => (\n  <div className=\"chat-header\">\n    <div className=\"chat-header-title\">\n    </div>\n    <div className=\"chat-header-button-container\">\n      <button className=\"chat-header-button\">\n        {/* <MaterialIcon icon=\"help\" invert size=\"27\"/> */}\n        Help\n      </button>\n    </div>\n    <div className=\"chat-header-button-container\">\n      <button className=\"chat-header-button\" onClick={props.toggleChatbot}>\n        {/* <MaterialIcon icon=\"power_settings_new\" color=\"white\" size=\"27\"/> */}\n        Logout\n      </button>\n    </div>\n  </div>\n)\n\nfunction Channels (props) {\n  const channels = props.channels\n  const channelList = channels.map((channel, index) =>\n    <li key={channel.id}>\n      <Channelitem channel={channel} toggleChannel={props.toggleChannel} activeChannel={props.activeChannel} />\n    </li>\n  )\n  return (\n    <ul className=\"channel-list\">\n      {channelList}\n    </ul>\n  )\n}\n\nfunction Channelitem (props) {\n  // classnames for active state\n  let channelButton = \"channel-list-button\"\n  let itemStatus = \"channel-item-status\"\n  if (props.activeChannel.id === props.channel.id) {\n    channelButton += \" active\"\n    itemStatus += \" active\"\n  }\n\n  // subline from last dialog\n  let content = props.channel.content\n  let lastDialog = content[content.length-1]\n  let subline\n  if (lastDialog.type === \"image\") {\n    subline = \"[ image ] \" + lastDialog.text\n  } else {\n    subline = lastDialog.text\n  }\n\n  return (\n    <button className={channelButton} onClick={props.toggleChannel(props.channel)}>\n      <div className=\"channel-item-container\">\n        <div className={itemStatus} />\n        <div className=\"channel-item-image\">\n\n        </div>\n        <div className=\"channel-item-headline\">\n          {props.channel.content[0].text}\n        </div>\n        <div className=\"channel-item-time\">\n          {lastDialog.timestamp}\n        </div>\n        <div className=\"channel-item-subline\">\n          {subline}\n        </div>\n        {props.channel.status===\"seen\" &&\n          <div className=\"channel-item-unread\">\n            unread\n          </div>\n        }\n\n      </div>\n    </button>\n  )\n}\n\nexport default Chatbot\n","import React from \"react\"\nimport Chatbot from \"./components/Chatbot\"\n\n\nconst data = [\n  {\n    icon: \"userIcon\",\n  \tstatus: \"read\",\n    id: \"channel0\",\n  \tcontent: [\n  \t\t{\n        type: \"text\",\n        author: \"shrimpy\",\n        text: \"Hallo hier ist Shrimpy!\",\n      \ttimestamp: \"11:20\",\n        id: \"shrimp_1\"\n      },\n      {\n        type: \"selection\",\n        author: \"shrimpy\",\n        text: \"Wie kann ich dir bei deinen Problemen helfen?\",\n        timestamp: \"11:20\",\n        id: \"shrimp_2\",\n        options: [\n          {\n            text: \"Wie bekomme ich den nächsten Badge?\",\n            id: \"answer_2\"\n          },\n          {\n            text: \"Bitte hilf mir bei der Bedienung. Ich weiß nicht so recht, wie ich wieder zurück zum Hauptmenu komme.\",\n            id: \"answer_1\"\n          },\n          {\n            text: \"Warum heißt du eigentlich Shrimpy?\",\n            id: \"answer_3\"\n          }\n        ]\n      },\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Bitte hilf mir bei der Bedienung. Ich weiß nicht so recht, wie ich wieder zurück zum Hauptmenu komme.\",\n        timestamp: \"11:30\",\n        id: \"answer_1\"\n      },\n      {\n        type: \"selection\",\n        author: \"shrimpy\",\n        text: \"Aber gerne doch. Siehst du oben rechts den Button auf dem Logout steht?\",\n        timestamp: \"13:20\",\n        id: \"select_13\",\n        options: [\n          {\n            text: \"Ja, den Button sehe ich.\",\n            id: \"answer_2\"\n          },\n          {\n            text: \"Nein, leider nicht.\",\n            id: \"us_anw5\"\n          }\n        ]\n      },\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Ja, den Button sehe ich.\",\n        timestamp: \"13:22\",\n        id: \"answer_2\"\n      },\n      {\n        type: \"text\",\n        author: \"shrimpy\",\n        text: \"Wenn du darauf klickst, kommst du wieder zurück zum Hauptmenu.\",\n        timestamp: \"13:25\",\n        id: \"shrimp_4\"\n      },\n      {\n        type: \"selection\",\n        author: \"shrimpy\",\n        text: \"Du kannst jederzeit in den Chatbot zurückkehren. Dafür musst du nur auf den Button Enter Chatbot klicken.\",\n        timestamp: \"13:26\",\n        id: \"shrimp_5\",\n        options: [\n          {\n            text: \"Danke Shrimpy!\",\n            id: \"answer_3\"\n          },\n          {\n            text: \"Ich habe noch eine andere Frage.\",\n            id: \"us_anw5\"\n          }\n        ]\n      },\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Danke Shrimpy!\",\n        timestamp: \"15:02\",\n        id: \"answer_3\"\n      }\n  \t]\n  },\n  {\n    icon: \"userIcon2\",\n    status: \"seen\",\n    id: \"channel1\",\n    content: [\n      {\n        type: \"text\",\n        author: \"shrimpy\",\n        text: \"Shrimpy hier, Glückwunsch zu deinem neuen Badge :).\",\n      \ttimestamp: \"11:20\",\n        id: \"shrimp_1\"\n      },\n      {\n        type: \"image\",\n        author: \"shrimpy\",\n        source: \"https://http.cat/301\",\n        text: \"Katzenbild\",\n        timestamp: \"11.21\",\n        id: \"shrimp_img1\"\n      },\n      {\n        type: \"selection\",\n        author: \"shrimpy\",\n        text: \"Willst du weiter über neue Badges informiert werden?\",\n        timestamp: \"11.46\",\n        id: \"select_3\",\n        options: [\n          {\n            text: \"Yeah, auf jeden Fall.\",\n            id: \"use_anw4\"\n          },\n          {\n            text: \"Bitte frage mich später nochmal.\",\n            id: \"us_anw5\"\n          },\n          {\n            text: \"Nein danke.\",\n            id: \"us_anw6\"\n          }\n        ]\n      },\n      {\n        type: \"text\",\n        text: \"Yeah, auf jeden Fall.\",\n        author: \"user\",\n        timestamp: \"12.12\",\n        id: \"use_anw4\"\n      },\n      {\n        type: \"text\",\n        text: \"Nicht lange, dann wartet der nächste Badge auf dich. Es gibt viele Interaktionsmöglichkeiten mit dem Reader zu entdecken.\",\n        author: \"shrimpy\",\n        timestamp: \"12.31\",\n        id: \"shrimpy_7\"\n      }\n    ]\n  },\n  {\n    icon: \"userIcon3\",\n    status: \"seen\",\n    id: \"channel2\",\n    content: [\n      {\n        type: \"text\",\n        author: \"shrimpy\",\n        text: \"Du hast einen neuen Badge\",\n        timestamp: \"19:50\",\n        id: \"option_1\"\n      },\n      {\n        type: \"image\",\n        author: \"shrimpy\",\n        source: \"https://http.cat/204\",\n        text: \"Katzenbild\",\n        timestamp: \"19.56\",\n        id: \"shrimp_img2\"\n      }\n    ]\n  },\n  {\n    icon: \"userIcon3\",\n    status: \"seen\",\n    id: \"channel3\",\n    content: [\n      {\n        type: \"text\",\n        author: \"shrimpy\",\n        text: \"Wichtige Frage\",\n        timestamp: \"8:11\",\n        id: \"shrimpy_8\"\n      },\n      {\n        type: \"selection\",\n        author: \"shrimpy\",\n        text: \"Magst du lieber Katzen oder Hunde?\",\n      \ttimestamp: \"8:21\",\n        id: \"select_1\",\n        options: [\n          {\n            text: \"Ich mag Katze sehr gern.\",\n            id: \"option_1\"\n          },\n          {\n            text: \"Ich bin mehr ein Hundemensch.\",\n            id: \"option_2\"\n          },\n          {\n            text: \"Keine Frage, natürlich mag ich beide.\",\n            id: \"option_3\"\n          },\n          {\n            text: \"Weder noch, ich liebe Shrimps.\",\n            id: \"option_4\"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    icon: \"userIcon3\",\n    status: \"read\",\n    id: \"channel4\",\n    content: [\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Platzhalter\",\n      \ttimestamp: \"19:54\",\n        id: \"platzhalter\"\n      }\n    ]\n  },\n  {\n    icon: \"userIcon3\",\n    status: \"read\",\n    id: \"channel5\",\n    content: [\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Platzhalter\",\n      \ttimestamp: \"19:54\",\n        id: \"platzhalter\"\n      }\n    ]\n  },\n  {\n    icon: \"userIcon3\",\n    status: \"read\",\n    id: \"channel6\",\n    content: [\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Platzhalter\",\n      \ttimestamp: \"19:54\",\n        id: \"platzhalter\"\n      }\n    ]\n  },\n  {\n    icon: \"userIcon3\",\n    status: \"read\",\n    id: \"channel7\",\n    content: [\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Platzhalter\",\n      \ttimestamp: \"19:54\",\n        id: \"platzhalter\"\n      }\n    ]\n  },\n  {\n    icon: \"userIcon3\",\n    status: \"read\",\n    id: \"channel8\",\n    content: [\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Platzhalter\",\n      \ttimestamp: \"19:54\",\n        id: \"platzhalter\"\n      }\n    ]\n  },\n  {\n    icon: \"userIcon42\",\n    status: \"read\",\n    id: \"channel9\",\n    content: [\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Platzhalter\",\n      \ttimestamp: \"19:54\",\n        id: \"platzhalter\"\n      }\n    ]\n  },\n  {\n    icon: \"userIcon27\",\n    status: \"read\",\n    id: \"channel10\",\n    content: [\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Platzhalter\",\n      \ttimestamp: \"19:54\",\n        id: \"platzhalter\"\n      }\n    ]\n  }\n]\n\nclass App extends React.Component{\n  state = {\n    chatBotIsActive: false\n  }\n\n  toggleChatbot = () => {\n    this.setState({chatBotIsActive: !this.state.chatBotIsActive})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {!this.state.chatBotIsActive ?\n          <Chatbot data={data} toggleChatbot={this.toggleChatbot}/> :\n          <ChatbotButton toggleChatbot={this.toggleChatbot}/>\n        }\n      </div>\n    )\n  }\n}\n\nfunction ChatbotButton (props) {\n  return (\n    <button onClick={props.toggleChatbot}> Enter Chatbot </button>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}