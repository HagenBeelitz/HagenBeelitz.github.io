{"version":3,"sources":["components/Chats.js","components/Chatbot.js","App.js","index.js"],"names":["Chats","this","updateScrollbar","props","scrollPos","scrollToEnd","chatDialog","document","getElementById","setTimeout","scroll","behavior","top","activeChannel","status","scrollBehavior","scrollTime","chatHeader","content","lastMessage","length","id","offsetTop","offsetHeight","className","Chatdialog","React","Component","contentList","map","item","index","type","key","Chatdialogbox","Chatdialogimage","nextItem","console","log","container","author","text","timestamp","src","source","alt","Chatdialogselection","state","hideSelection","toggleSelection","setState","selectionList","options","option","chatSelectionList","chatSelectionEdit","onClick","Chatbot","scrollPosList","Array","data","fill","nextScrollPos","toggleChannel","clickedChannel","e","lastScrollPos","scrollTop","value","entries","toggleChatbot","Channels","channels","Chatheader","channelList","channel","Channelitem","channelButton","itemStatus","subline","lastDialog","icon","ChatbotButton","App","chatBotIsActive","ReactDOM","render"],"mappings":"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","file":"static/js/main.5aca4821.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./Chats.css\"\n\n\nclass Chats extends React.Component {\n\n  componentDidUpdate() {\n    this.updateScrollbar()\n  }\n\n  updateScrollbar() {\n    if(this.props.scrollPos === null) {\n      // initialize scrollbar with end position\n      this.scrollToEnd(\"auto\", 1)\n    } else {\n      // set scrollbar as it was before\n      let chatDialog = document.getElementById(\"chatDialog\")\n      setTimeout(() => {\n        chatDialog.scroll({\n          behavior: 'auto',\n          top: this.props.scrollPos\n        })\n      }, 1);\n\n      // update scrollbar if there are new elements\n      if(this.props.activeChannel.status === \"seen\") {\n        this.scrollToEnd(\"smooth\", 100)\n      }\n    }\n  }\n\n  scrollToEnd(scrollBehavior, scrollTime) {\n    let chatDialog = document.getElementById(\"chatDialog\")\n    let chatHeader = document.getElementById(\"chatHeader\")\n    let content = this.props.activeChannel.content\n    let lastMessage = document.getElementById(content[content.length-1].id)\n\n    setTimeout(() => {\n      let offsetMessages = lastMessage.offsetTop + lastMessage.offsetHeight - chatHeader.offsetHeight\n      let offsetChatDialog = chatDialog.offsetHeight\n      let scrollPos = offsetMessages - offsetChatDialog\n\n      if(scrollPos > 0) {\n        chatDialog.scroll({\n          behavior: scrollBehavior,\n          top: scrollPos\n        })\n      }\n    }, scrollTime);\n  }\n\n\n  render() {\n    return (\n      <div className=\"chat\">\n        <div className=\"chat-dialog\" id=\"chatDialog\">\n          <Chatdialog activeChannel={this.props.activeChannel}/>\n        </div>\n        <div className=\"chat-footer\" />\n      </div>\n    )\n  }\n}\n\n\nfunction Chatdialog (props) {\n  let contentList = false\n  if (props.activeChannel) {\n    const content = props.activeChannel.content\n    contentList = content.map((item,index) =>\n      (item.type === \"text\") ?\n        <li key={item.id} id={item.id}>\n          <Chatdialogbox item={item}/>\n        </li>\n        :\n        (item.type === \"image\") ?\n        <li key={item.id} id={item.id}>\n          <Chatdialogimage item={item}/>\n        </li>\n        :\n        (item.type === \"selection\") ?\n        <li key={item.id} id={item.id}>\n          <Chatdialogselection item={item} nextItem={(index === content.length-1) ? false : content[index+1]}/>\n        </li>\n        :\n        console.log(\"warning, missing content type: \" + item.type )\n    )\n  }\n  return (\n    <ul className=\"chat-dialog-list\">\n      {contentList}\n    </ul>\n  )\n}\n\nfunction Chatdialogbox (props) {\n  let container\n  if(props.item.author === \"shrimpy\") {\n    container = \"chat-container-left\"\n  }\n  else {\n    container = \"chat-container-right\"\n  }\n\n  return (\n    <div className={container}>\n      <div className=\"chat-item speech-bubble\">\n        <div className=\"chat-item-text\">\n          {props.item.text}\n        </div>\n        <div className=\"chat-item-time\">\n          {props.item.timestamp}\n        </div>\n      </div>\n    </div>\n  )\n}\n\n\nfunction Chatdialogimage (props) {\n  return (\n    <div className=\"chat-container-left\">\n      <img className=\"chat-image\" src={props.item.source} alt={props.item.text}/>\n    </div>\n  )\n}\n\n\nclass Chatdialogselection extends React.Component {\n  state = {\n    hideSelection: false\n  }\n\n  toggleSelection = () => {\n    this.setState({hideSelection: !this.state.hideSelection})\n  }\n\n  // hide already selected items\n  componentDidMount() {\n    if (this.props.nextItem) {\n      this.setState({hideSelection: true})\n    }\n  }\n\n  render() {\n    let options = this.props.item.options\n    let selectionList = options.map(option =>\n      <li key={option.id}>\n        <button className={\"chat-selection-button \" + (option.id === this.props.nextItem.id ? \"selected\" : \"\")}>\n          <div className=\"chat-selection-button-text\">\n            {option.text}\n          </div>\n        </button>\n      </li>\n  )\n\n    // hide or show selection list depending on state of edit button\n    let chatSelectionList = \"chat-selection-list\"\n    if (this.state.hideSelection === true) {\n      chatSelectionList += \" hide\"\n    }\n\n    // hide edit icon if there is no selection\n    let chatSelectionEdit = \"chat-selection-edit\"\n    if (!this.props.nextItem) {\n      chatSelectionEdit += \" hide\"\n    }\n\n    return (\n      <div className=\"chat-container-left\">\n        <div className=\"chat-selection speech-bubble\">\n          <div className=\"chat-item-text\">\n            {this.props.item.text}\n          </div>\n          <ul className={chatSelectionList}>\n            {selectionList}\n          </ul>\n          <button className={chatSelectionEdit} onClick={this.toggleSelection}>\n            edit\n          </button>\n          <div className=\"chat-item-time\">\n            {this.props.item.timestamp}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\n\n\nexport default Chats\n","import React from \"react\"\n\nimport \"./Chatbot.css\"\nimport Chats from \"./Chats\"\n\n\nclass Chatbot extends React.Component {\n  state = {\n      activeChannel: false,\n      scrollPosList: Array(this.props.data.length).fill(null),\n      nextScrollPos: null\n  }\n\n  // use arrow function to get parameter from onCLick function\n  toggleChannel = clickedChannel => e => {\n    if(this.state.activeChannel !== clickedChannel) {\n\n      // save last scroll positon in scrollPosList\n      let lastScrollPos = document.getElementById(\"chatDialog\").scrollTop\n      this.setState(state => {\n        const scrollPosList = state.scrollPosList.map((value, index) => {\n          if (this.props.data[index].id === this.state.activeChannel.id) {\n            return lastScrollPos\n          } else {\n            return value\n          }\n        })\n        return {\n          scrollPosList\n        }\n      })\n\n      // update active channel\n      this.setState({activeChannel: clickedChannel})\n\n      // update next scroll position\n      for (const[index, scrollPos] of this.state.scrollPosList.entries()) {\n          if(this.props.data[index].id === clickedChannel.id) {\n            this.setState({nextScrollPos: scrollPos})\n          }\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"chatbot\">\n          <div className=\"channel-header-container\">\n            <div className=\"channel-header\">\n              Chatbot\n            </div>\n          </div>\n          <div className=\"chat-header-container\">\n            <Chatheader toggleChatbot={this.props.toggleChatbot} activeChannel={this.state.activeChannel}/>\n          </div>\n          <div className=\"channel-container\">\n            <Channels channels={this.props.data} toggleChannel={this.toggleChannel} activeChannel={this.state.activeChannel}/>\n          </div>\n          <div className=\"chat-container\">\n            <Chats toggleChatbot={this.props.toggleChatbot} activeChannel={this.state.activeChannel} scrollPos={this.state.nextScrollPos}/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst Chatheader = props => (\n  <div className=\"chat-header\" id=\"chatHeader\">\n    <div className=\"chat-header-title\">\n    </div>\n    <div className=\"chat-header-button-container\">\n      <button className=\"chat-header-button\">\n        Help\n      </button>\n    </div>\n    <div className=\"chat-header-button-container\">\n      <button className=\"chat-header-button\" onClick={props.toggleChatbot}>\n        Logout\n      </button>\n    </div>\n  </div>\n)\n\nfunction Channels (props) {\n  const channels = props.channels\n  const channelList = channels.map((channel, index) =>\n    <li key={channel.id}>\n      <Channelitem channel={channel} toggleChannel={props.toggleChannel} activeChannel={props.activeChannel} />\n    </li>\n  )\n  return (\n    <ul className=\"channel-list\">\n      {channelList}\n    </ul>\n  )\n}\n\nfunction Channelitem (props) {\n  // classnames for active state\n  let channelButton = \"channel-list-button\"\n  let itemStatus = \"channel-item-status\"\n  if (props.activeChannel.id === props.channel.id) {\n    channelButton += \" active\"\n    itemStatus += \" active\"\n  }\n\n  // subline from last dialog\n  let content = props.channel.content\n  let lastDialog = content[content.length-1]\n  let subline\n  if (lastDialog.type === \"image\") {\n    subline = \"[ image ] \" + lastDialog.text\n  } else {\n    subline = lastDialog.text\n  }\n\n  return (\n    <button className={channelButton} onClick={props.toggleChannel(props.channel)}>\n      <div className=\"channel-item-container\">\n        <div className={itemStatus} />\n        <div className=\"channel-item-image\">\n\n        </div>\n        <div className=\"channel-item-headline\">\n          {props.channel.content[0].text}\n        </div>\n        <div className=\"channel-item-time\">\n          {lastDialog.timestamp}\n        </div>\n        <div className=\"channel-item-subline\">\n          {subline}\n        </div>\n        {props.channel.status===\"seen\" &&\n          <div className=\"channel-item-unread\">\n            unread\n          </div>\n        }\n\n      </div>\n    </button>\n  )\n}\n\nexport default Chatbot\n","import React from \"react\"\nimport Chatbot from \"./components/Chatbot\"\n\n\nconst data = [\n  {\n    icon: \"userIcon\",\n  \tstatus: \"read\",\n    id: \"channel0\",\n  \tcontent: [\n  \t\t{\n        type: \"text\",\n        author: \"shrimpy\",\n        text: \"Hallo hier ist Shrimpy!\",\n      \ttimestamp: \"11:20\",\n        id: \"shrimp_1\"\n      },\n      {\n        type: \"selection\",\n        author: \"shrimpy\",\n        text: \"Wie kann ich dir bei deinen Problemen helfen?\",\n        timestamp: \"11:20\",\n        id: \"shrimp_2\",\n        options: [\n          {\n            text: \"Wie bekomme ich den nächsten Badge?\",\n            id: \"answer_2\"\n          },\n          {\n            text: \"Bitte hilf mir bei der Bedienung. Ich weiß nicht so recht, wie ich wieder zurück zum Hauptmenu komme.\",\n            id: \"answer_1\"\n          },\n          {\n            text: \"Warum heißt du eigentlich Shrimpy?\",\n            id: \"answer_3\"\n          }\n        ]\n      },\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Bitte hilf mir bei der Bedienung. Ich weiß nicht so recht, wie ich wieder zurück zum Hauptmenu komme.\",\n        timestamp: \"11:30\",\n        id: \"answer_1\"\n      },\n      {\n        type: \"selection\",\n        author: \"shrimpy\",\n        text: \"Aber gerne doch. Siehst du oben rechts den Button auf dem Logout steht?\",\n        timestamp: \"13:20\",\n        id: \"select_13\",\n        options: [\n          {\n            text: \"Ja, den Button sehe ich.\",\n            id: \"answer_2\"\n          },\n          {\n            text: \"Nein, leider nicht.\",\n            id: \"us_anw5\"\n          }\n        ]\n      },\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Ja, den Button sehe ich.\",\n        timestamp: \"13:22\",\n        id: \"answer_2\"\n      },\n      {\n        type: \"text\",\n        author: \"shrimpy\",\n        text: \"Wenn du darauf klickst, kommst du wieder zurück zum Hauptmenu.\",\n        timestamp: \"13:25\",\n        id: \"shrimp_4\"\n      },\n      {\n        type: \"selection\",\n        author: \"shrimpy\",\n        text: \"Du kannst jederzeit in den Chatbot zurückkehren. Dafür musst du nur auf den Button Enter Chatbot klicken.\",\n        timestamp: \"13:26\",\n        id: \"shrimp_5\",\n        options: [\n          {\n            text: \"Danke Shrimpy!\",\n            id: \"answer_3\"\n          },\n          {\n            text: \"Ich habe noch eine andere Frage.\",\n            id: \"us_anw5\"\n          }\n        ]\n      },\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Danke Shrimpy!\",\n        timestamp: \"15:02\",\n        id: \"answer_3\"\n      }\n  \t]\n  },\n  {\n    icon: \"userIcon2\",\n    status: \"seen\",\n    id: \"channel1\",\n    content: [\n      {\n        type: \"text\",\n        author: \"shrimpy\",\n        text: \"Shrimpy hier, Glückwunsch zu deinem neuen Badge :).\",\n      \ttimestamp: \"11:20\",\n        id: \"shrimp_1\"\n      },\n      {\n        type: \"image\",\n        author: \"shrimpy\",\n        source: \"https://http.cat/301\",\n        text: \"Katzenbild\",\n        timestamp: \"11.21\",\n        id: \"shrimp_img1\"\n      },\n      {\n        type: \"selection\",\n        author: \"shrimpy\",\n        text: \"Willst du weiter über neue Badges informiert werden?\",\n        timestamp: \"11.46\",\n        id: \"select_3\",\n        options: [\n          {\n            text: \"Yeah, auf jeden Fall.\",\n            id: \"use_anw4\"\n          },\n          {\n            text: \"Bitte frage mich später nochmal.\",\n            id: \"us_anw5\"\n          },\n          {\n            text: \"Nein danke.\",\n            id: \"us_anw6\"\n          }\n        ]\n      },\n      {\n        type: \"text\",\n        text: \"Yeah, auf jeden Fall.\",\n        author: \"user\",\n        timestamp: \"12.12\",\n        id: \"use_anw4\"\n      },\n      {\n        type: \"text\",\n        text: \"Nicht lange, dann wartet der nächste Badge auf dich. Es gibt viele Interaktionsmöglichkeiten mit dem Reader zu entdecken.\",\n        author: \"shrimpy\",\n        timestamp: \"12.31\",\n        id: \"shrimpy_7\"\n      }\n    ]\n  },\n  {\n    icon: \"userIcon3\",\n    status: \"seen\",\n    id: \"channel2\",\n    content: [\n      {\n        type: \"text\",\n        author: \"shrimpy\",\n        text: \"Du hast einen neuen Badge\",\n        timestamp: \"19:50\",\n        id: \"option_1\"\n      },\n      {\n        type: \"image\",\n        author: \"shrimpy\",\n        source: \"https://http.cat/204\",\n        text: \"Katzenbild\",\n        timestamp: \"19.56\",\n        id: \"shrimp_img2\"\n      }\n    ]\n  },\n  {\n    icon: \"userIcon3\",\n    status: \"seen\",\n    id: \"channel3\",\n    content: [\n      {\n        type: \"text\",\n        author: \"shrimpy\",\n        text: \"Wichtige Frage\",\n        timestamp: \"8:11\",\n        id: \"shrimpy_8\"\n      },\n      {\n        type: \"selection\",\n        author: \"shrimpy\",\n        text: \"Magst du lieber Katzen oder Hunde?\",\n      \ttimestamp: \"8:21\",\n        id: \"select_1\",\n        options: [\n          {\n            text: \"Ich mag Katze sehr gern.\",\n            id: \"option_1\"\n          },\n          {\n            text: \"Ich bin mehr ein Hundemensch.\",\n            id: \"option_2\"\n          },\n          {\n            text: \"Keine Frage, natürlich mag ich beide.\",\n            id: \"option_3\"\n          },\n          {\n            text: \"Weder noch, ich liebe Shrimps.\",\n            id: \"option_4\"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    icon: \"userIcon3\",\n    status: \"read\",\n    id: \"channel4\",\n    content: [\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Platzhalter\",\n      \ttimestamp: \"19:54\",\n        id: \"platzhalter\"\n      }\n    ]\n  },\n  {\n    icon: \"userIcon3\",\n    status: \"read\",\n    id: \"channel5\",\n    content: [\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Platzhalter\",\n      \ttimestamp: \"19:54\",\n        id: \"platzhalter\"\n      }\n    ]\n  },\n  {\n    icon: \"userIcon3\",\n    status: \"read\",\n    id: \"channel6\",\n    content: [\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Platzhalter\",\n      \ttimestamp: \"19:54\",\n        id: \"platzhalter\"\n      }\n    ]\n  },\n  {\n    icon: \"userIcon3\",\n    status: \"read\",\n    id: \"channel7\",\n    content: [\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Platzhalter\",\n      \ttimestamp: \"19:54\",\n        id: \"platzhalter\"\n      }\n    ]\n  },\n  {\n    icon: \"userIcon3\",\n    status: \"read\",\n    id: \"channel8\",\n    content: [\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Platzhalter\",\n      \ttimestamp: \"19:54\",\n        id: \"platzhalter\"\n      }\n    ]\n  },\n  {\n    icon: \"userIcon42\",\n    status: \"read\",\n    id: \"channel9\",\n    content: [\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Platzhalter\",\n      \ttimestamp: \"19:54\",\n        id: \"platzhalter\"\n      }\n    ]\n  },\n  {\n    icon: \"userIcon27\",\n    status: \"read\",\n    id: \"channel10\",\n    content: [\n      {\n        type: \"text\",\n        author: \"user\",\n        text: \"Platzhalter\",\n      \ttimestamp: \"19:54\",\n        id: \"platzhalter\"\n      }\n    ]\n  }\n]\n\nclass App extends React.Component{\n  state = {\n    chatBotIsActive: false\n  }\n\n  toggleChatbot = () => {\n    this.setState({chatBotIsActive: !this.state.chatBotIsActive})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {!this.state.chatBotIsActive ?\n          <Chatbot data={data} toggleChatbot={this.toggleChatbot}/> :\n          <ChatbotButton toggleChatbot={this.toggleChatbot}/>\n        }\n      </div>\n    )\n  }\n}\n\nfunction ChatbotButton (props) {\n  return (\n    <button onClick={props.toggleChatbot}> Enter Chatbot </button>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}