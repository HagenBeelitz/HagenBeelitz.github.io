{"version":3,"sources":["components/Chats.js","components/Chatbot.js","App.js","index.js"],"names":["Chats","getInput","e","preventDefault","chatInput","target","elements","value","console","log","className","flexDirection","toggleChatbot","this","props","activeChannel","Chatdialog","Chattextfield","React","Component","Chatheader","flexGrow","title","onClick","dialogue","content","items","Array","map","val","i","item","key","onSubmit","type","name","Channels","listChannels","channels","channel","index","id","Channel","toggleChannel","timestamp","Chatbot","state","clickedChannel","setState","data","icon","status","ChatbotButton","App","chatBotIsActive","ReactDOM","render","document","getElementById"],"mappings":"gSAKMA,G,iNACJC,SAAW,SAACC,GACVA,EAAEC,iBACF,IAAMC,EAAYF,EAAEG,OAAOC,SAASF,UAAUG,MAC9CC,QAAQC,IAAIL,I,wEAIZ,OACE,kBAAC,IAAD,CAASM,UAAU,QAAQC,cAAc,UACvC,kBAAC,EAAD,CAAYC,cAAeC,KAAKC,MAAMF,cAAeG,cAAeF,KAAKC,MAAMC,gBAC/E,kBAACC,EAAD,CAAYD,cAAeF,KAAKC,MAAMC,gBACtC,kBAACE,EAAD,CAAehB,SAAUY,KAAKZ,gB,GAZlBiB,IAAMC,YAkBpBC,EAAa,SAAAN,GAAK,OACtB,kBAAC,IAAD,CAASJ,UAAU,cAAcC,cAAc,OAC7C,kBAAC,IAAD,CAASD,UAAU,oBAAoBW,SAAU,GAC9CP,EAAMC,cAAcO,OAEvB,kBAAC,IAAD,CAASZ,UAAU,sBACjB,4BAAQa,QAAST,EAAMF,eAAvB,qBAKN,SAASI,EAAYF,GACnB,IAAIU,EAAW,EACXV,EAAMC,gBACRS,EAAWV,EAAMC,cAAcU,QAAQ,GAAGD,UAE5C,IAAIE,EAAQ,YAAIC,MAAMH,IAAWI,KAAI,SAACC,EAAKC,GAAN,qBAAoBA,MAEzD,OACE,yBAAKpB,UAAU,aACb,4BACGgB,EAAME,KAAI,SAACG,EAAMD,GAAP,OAAc,wBAAIE,IAAG,eAAUF,IAAOC,QAMzD,SAASd,EAAeH,GACpB,OACE,0BAAMmB,SAAUnB,EAAMb,SAAUS,UAAU,uBACxC,kBAAC,IAAD,CAASA,UAAU,iBAAiBC,cAAc,OAChD,kBAAC,IAAD,CAASU,SAAU,GACjB,2BAAOa,KAAK,OAAOC,KAAK,YAAYzB,UAAU,gBAEhD,4BAAQA,UAAU,qBAAlB,YAOKV,QC/Bf,SAASoC,EAAUtB,GACjB,IACMuB,EADWvB,EAAMwB,SACOV,KAAI,SAACW,EAASC,GAAV,OAClC,6BACE,wBAAIR,IAAKO,EAAQE,IACf,kBAACC,EAAD,CAASH,QAASA,EAASI,cAAe7B,EAAM6B,cAAe5B,cAAeD,EAAMC,iBAEtF,yBAAKL,UAAU,0BAGjB,OACE,kBAAC,IAAD,CAASA,UAAU,WAAWC,cAAc,UAC1C,yBAAKD,UAAU,kBAAf,iBAGA,wBAAIA,UAAU,gBACX2B,IAMT,SAASK,EAAS5B,GAChB,IAAIJ,EAAY,iBAKhB,OAJII,EAAMC,cAAc0B,KAAO3B,EAAMyB,QAAQE,KAC3C/B,GAAa,WAIb,4BAAQA,UAAWA,EAAWa,QAAST,EAAM6B,cAAc7B,EAAMyB,UAC/D,kBAAC,IAAD,CAAS5B,cAAc,OACrB,yBAAKD,UAAU,sBAAf,QAIA,kBAAC,IAAD,CAASA,UAAU,uBAAuBC,cAAc,SAASU,SAAU,GACxEP,EAAMyB,QAAQjB,OAOjB,kBAAC,IAAD,CAASZ,UAAU,yBAChBI,EAAMyB,QAAQK,aAOVC,M,2MA7EbC,MAAQ,CACJ/B,eAAe,G,EAInB4B,cAAgB,SAAAI,GAAc,OAAI,SAAA7C,GAChCA,EAAEC,iBACF,EAAK6C,SAAS,CAACjC,cAAegC,M,wEAI9B,OACE,6BACE,kBAAC,IAAD,CAASrC,UAAU,kBAAkBC,cAAc,OACjD,kBAAC,IAAD,CAASD,UAAU,mBAAmBW,SAAU,GAC9C,kBAACe,EAAD,CAAUE,SAAUzB,KAAKC,MAAMmC,KAAMN,cAAe9B,KAAK8B,cAAe5B,cAAeF,KAAKiC,MAAM/B,iBAEpG,kBAAC,IAAD,CAASL,UAAU,gBAAgBW,SAAU,GAC3C,kBAAC,EAAD,CAAOT,cAAeC,KAAKC,MAAMF,cAAeG,cAAeF,KAAKiC,MAAM/B,uB,GAnBhEG,IAAMC,WCFtB8B,EAAO,CACX,CACEC,KAAM,WACP5B,MAAO,yBACPsB,UAAW,aACXO,OAAQ,OACPV,GAAI,WACLhB,QAAS,CACR,CAACD,SAAU,MAGb,CACE0B,KAAM,YACN5B,MAAO,yBACPsB,UAAW,aACXO,OAAQ,OACRV,GAAI,WACJhB,QAAS,CACP,CAACD,SAAU,KAGf,CACE0B,KAAM,YACN5B,MAAO,6BACPsB,UAAW,aACXO,OAAQ,OACRV,GAAI,WACJhB,QAAS,CACP,CAACD,SAAU,OAGf,CACE0B,KAAM,YACN5B,MAAO,SACPsB,UAAW,aACXO,OAAQ,OACRV,GAAI,WACJhB,QAAS,CACP,CAACD,SAAU,MAGf,CACE0B,KAAM,YACN5B,MAAO,kBACPsB,UAAW,aACXO,OAAQ,OACRV,GAAI,WACJhB,QAAS,CACP,CAACD,SAAU,KAGf,CACE0B,KAAM,YACN5B,MAAO,qBACPsB,UAAW,aACXO,OAAQ,OACRV,GAAI,WACJhB,QAAS,CACP,CAACD,SAAU,MAGf,CACE0B,KAAM,YACN5B,MAAO,qBACPsB,UAAW,aACXO,OAAQ,OACRV,GAAI,WACJhB,QAAS,CACP,CAACD,SAAU,MAGf,CACE0B,KAAM,YACN5B,MAAO,0BACPsB,UAAW,aACXO,OAAQ,OACRV,GAAI,WACJhB,QAAS,CACP,CAACD,SAAU,KAGf,CACE0B,KAAM,YACN5B,MAAO,mEACPsB,UAAW,aACXO,OAAQ,OACRV,GAAI,WACJhB,QAAS,CACP,CAACD,SAAU,QA0BjB,SAAS4B,EAAetC,GACtB,OACE,4BAAQS,QAAST,EAAMF,eAAvB,mBAIWyC,M,2MA1BbP,MAAQ,CACNQ,iBAAiB,G,EAGnB1C,cAAgB,WACd,EAAKoC,SAAS,CAACM,iBAAkB,EAAKR,MAAMQ,mB,wEAI5C,OACE,yBAAK5C,UAAU,OACXG,KAAKiC,MAAMQ,gBAEX,kBAACF,EAAD,CAAexC,cAAeC,KAAKD,gBADnC,kBAAC,EAAD,CAASqC,KAAMA,EAAMrC,cAAeC,KAAKD,qB,GAbjCM,IAAMC,WC7FxBoC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.e6379d93.chunk.js","sourcesContent":["import React from \"react\"\nimport Flexbox from \"flexbox-react\"\n\nimport \"./Chats.css\"\n\nclass Chats extends React.Component {\n  getInput = (e) => {\n    e.preventDefault()\n    const chatInput = e.target.elements.chatInput.value\n    console.log(chatInput)\n  }\n\n  render() {\n    return (\n      <Flexbox className=\"chats\" flexDirection=\"column\">\n        <Chatheader toggleChatbot={this.props.toggleChatbot} activeChannel={this.props.activeChannel}/>\n        <Chatdialog activeChannel={this.props.activeChannel}/>\n        <Chattextfield getInput={this.getInput} />\n      </Flexbox>\n    )\n  }\n}\n\nconst Chatheader = props => (\n  <Flexbox className=\"chat-header\" flexDirection=\"row\">\n    <Flexbox className=\"chat-header-title\" flexGrow={1}>\n      {props.activeChannel.title}\n    </Flexbox>\n    <Flexbox className=\"chat-header-button\">\n      <button onClick={props.toggleChatbot}> Exit Chatbot </button>\n    </Flexbox>\n  </Flexbox>\n)\n\nfunction Chatdialog (props) {\n  let dialogue = 0\n  if (props.activeChannel) {\n    dialogue = props.activeChannel.content[0].dialogue\n  }\n  let items = [...Array(dialogue)].map((val, i) => `Item ${i}`)\n\n  return (\n    <div className=\"chat-list\">\n      <ul>\n        {items.map((item, i) => (<li key={`item_${i}`}>{ item }</li>))}\n      </ul>\n    </div>\n  )\n}\n\nfunction Chattextfield (props) {\n    return (\n      <form onSubmit={props.getInput} className=\"chat-textfield-form\">\n        <Flexbox className=\"chat-textfield\" flexDirection=\"row\">\n          <Flexbox flexGrow={1}>\n            <input type=\"text\" name=\"chatInput\" className=\"chat-input\"/>\n          </Flexbox>\n          <button className=\"chat-input-button\"> Send </button>\n        </Flexbox>\n      </form>\n    )\n}\n\n\nexport default Chats\n","import React from \"react\"\nimport Flexbox from \"flexbox-react\"\n\nimport \"./Chatbot.css\"\nimport Chats from \"./Chats\"\n\nclass Chatbot extends React.Component {\n  state = {\n      activeChannel: false\n  }\n\n  // use arrow function to get parameter from onCLick function\n  toggleChannel = clickedChannel => e => {\n    e.preventDefault()\n    this.setState({activeChannel: clickedChannel})\n  }\n\n  render() {\n    return (\n      <div>\n        <Flexbox className=\"chatbot-flexbox\" flexDirection=\"row\">\n          <Flexbox className=\"channels-flexbox\" flexGrow={1}>\n            <Channels channels={this.props.data} toggleChannel={this.toggleChannel} activeChannel={this.state.activeChannel}/>\n          </Flexbox>\n          <Flexbox className=\"chats-flexbox\" flexGrow={4}>\n            <Chats toggleChatbot={this.props.toggleChatbot} activeChannel={this.state.activeChannel}/>\n          </Flexbox>\n        </Flexbox>\n      </div>\n    )\n  }\n}\n\nfunction Channels (props) {\n  const channels = props.channels\n  const listChannels = channels.map((channel, index) =>\n  <div>\n    <li key={channel.id}>\n      <Channel channel={channel} toggleChannel={props.toggleChannel} activeChannel={props.activeChannel} />\n    </li>\n    <div className=\"channel-list-line\"/>\n  </div>\n  )\n  return (\n    <Flexbox className=\"channels\" flexDirection=\"column\">\n      <div className=\"channel-header\">\n        Channelheader\n      </div>\n      <ul className=\"channel-list\">\n        {listChannels}\n      </ul>\n    </Flexbox>\n  )\n}\n\nfunction Channel (props) {\n  let className = \"channel-button\"\n  if (props.activeChannel.id === props.channel.id) {\n    className += \" active\"\n  }\n\n  return (\n    <button className={className} onClick={props.toggleChannel(props.channel)}>\n      <Flexbox flexDirection=\"row\">\n        <div className=\"channel-button-img\">\n          {/* <img src={userImg} alt={\"logo\"}/> */}\n          Bild\n        </div>\n        <Flexbox className=\"channel-button-title\" flexDirection=\"column\" flexGrow={1}>\n          {props.channel.title}\n          {/* <Flexbox className=\"channel-button-title\" flexGrow={1}>\n          </Flexbox> */}\n          {/* <Flexbox className=\"channel-button-subtitle\">\n            {props.channel.status}\n          </Flexbox> */}\n        </Flexbox>\n        <Flexbox className=\"channel-button-status\">\n          {props.channel.timestamp}\n        </Flexbox>\n      </Flexbox>\n    </button>\n  )\n}\n\nexport default Chatbot\n","import React from \"react\"\nimport Chatbot from \"./components/Chatbot\"\n\n\nconst data = [\n  {\n    icon: \"userIcon\",\n  \ttitle: \"Shrimpy will help you!\",\n  \ttimestamp: \"01.11.2019\",\n  \tstatus: \"seen\",\n    id: \"channel0\",\n  \tcontent: [\n  \t\t{dialogue: 10}\n  \t\t]\n  },\n  {\n    icon: \"userIcon2\",\n    title: \"You got another badge!\",\n    timestamp: \"27.10.2019\",\n    status: \"read\",\n    id: \"channel1\",\n    content: [\n      {dialogue: 5}\n      ]\n  },\n  {\n    icon: \"userIcon3\",\n    title: \"You got just another badge\",\n    timestamp: \"26.10.2019\",\n    status: \"seen\",\n    id: \"channel2\",\n    content: [\n      {dialogue: 100}\n      ]\n  },\n  {\n    icon: \"userIcon3\",\n    title: \"Yeah!!\",\n    timestamp: \"24.10.2019\",\n    status: \"seen\",\n    id: \"channel3\",\n    content: [\n      {dialogue: 20}\n      ]\n  },\n  {\n    icon: \"userIcon3\",\n    title: \"This is a title\",\n    timestamp: \"24.10.2019\",\n    status: \"seen\",\n    id: \"channel4\",\n    content: [\n      {dialogue: 3}\n      ]\n  },\n  {\n    icon: \"userIcon3\",\n    title: \"What do you think?\",\n    timestamp: \"15.10.2019\",\n    status: \"seen\",\n    id: \"channel5\",\n    content: [\n      {dialogue: 42}\n      ]\n  },\n  {\n    icon: \"userIcon3\",\n    title: \"Just another thing\",\n    timestamp: \"14.10.2019\",\n    status: \"read\",\n    id: \"channel6\",\n    content: [\n      {dialogue: 21}\n      ]\n  },\n  {\n    icon: \"userIcon3\",\n    title: \"I want to ask something\",\n    timestamp: \"03.10.2019\",\n    status: \"read\",\n    id: \"channel7\",\n    content: [\n      {dialogue: 8}\n      ]\n  },\n  {\n    icon: \"userIcon3\",\n    title: \"This title is looooooooooooooooooooooooooooooooooooooooooooooong\",\n    timestamp: \"13.09.2019\",\n    status: \"read\",\n    id: \"channel8\",\n    content: [\n      {dialogue: 400}\n      ]\n  }\n]\n\nclass App extends React.Component{\n  state = {\n    chatBotIsActive: false\n  }\n\n  toggleChatbot = () => {\n    this.setState({chatBotIsActive: !this.state.chatBotIsActive})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {!this.state.chatBotIsActive ?\n          <Chatbot data={data} toggleChatbot={this.toggleChatbot}/> :\n          <ChatbotButton toggleChatbot={this.toggleChatbot}/>\n        }\n      </div>\n    )\n  }\n}\n\nfunction ChatbotButton (props) {\n  return (\n    <button onClick={props.toggleChatbot}> Enter Chatbot </button>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}